import java.util.*;
class Graph{
    ArrayList<ArrayList<Integer>> list=new ArrayList<>();
    Graph(int v){
        for(int i=0;i<v;i++){
            list.add(new ArrayList<Integer>());
        }
    }
    
    public void addEdges(int u,int v){
        list.get(u).add(v);
        list.get(v).add(u);
    }
    
    public boolean detectcycle(){
        boolean[] visited=new boolean[list.size()];
        
        for(int start=0;start<list.size();start++){
            if(!visited[start]){
                if(detection(start,visited)){
                    return true;
                }
            }
        }
        return false;
    }
    
    public boolean detection(int start,boolean[] visited){
        Queue<int[]> q=new LinkedList<>();
        q.add(new int[]{start,-1});
        visited[start]=true;
        
        while(!q.isEmpty()){
            int[] curr=q.remove();
            int node=curr[0];
            int parent=curr[1];
            
            for(int neigh:list.get(node)){
                if(!visited[neigh]){
                    visited[neigh]=true;
                    q.add(new int[]{neigh,node});
                }else if(neigh != parent){
                    return true;
                }
            }
        }
        return false;
    }
    
    
}
public class Main{
    public static void main(String[] args){
        
        Graph g=new Graph(5);
        g.addEdges(0, 1);
        g.addEdges(1, 2);
        g.addEdges(0, 3);
       // g.addEdges(1, 3); 
        g.addEdges(1, 4);
        
        if(g.detectcycle()){
            System.out.print("Cycle detected");
        }else{
            System.out.print("Not Cycle detected");
        }
        
    }
}
